// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: elevation.proto

package elevationapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElevationService_GetElevation_FullMethodName = "/elevationapi.v1.ElevationService/GetElevation"
	ElevationService_GetProfile_FullMethodName   = "/elevationapi.v1.ElevationService/GetProfile"
)

// ElevationServiceClient is the client API for ElevationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition.
type ElevationServiceClient interface {
	// Retrieves the elevation for a single geographic coordinate.
	GetElevation(ctx context.Context, in *ElevationRequest, opts ...grpc.CallOption) (*ElevationResponse, error)
	// Retrieves an elevation profile along a path of coordinates.
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
}

type elevationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElevationServiceClient(cc grpc.ClientConnInterface) ElevationServiceClient {
	return &elevationServiceClient{cc}
}

func (c *elevationServiceClient) GetElevation(ctx context.Context, in *ElevationRequest, opts ...grpc.CallOption) (*ElevationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ElevationResponse)
	err := c.cc.Invoke(ctx, ElevationService_GetElevation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elevationServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, ElevationService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElevationServiceServer is the server API for ElevationService service.
// All implementations should embed UnimplementedElevationServiceServer
// for forward compatibility.
//
// The service definition.
type ElevationServiceServer interface {
	// Retrieves the elevation for a single geographic coordinate.
	GetElevation(context.Context, *ElevationRequest) (*ElevationResponse, error)
	// Retrieves an elevation profile along a path of coordinates.
	GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
}

// UnimplementedElevationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElevationServiceServer struct{}

func (UnimplementedElevationServiceServer) GetElevation(context.Context, *ElevationRequest) (*ElevationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElevation not implemented")
}
func (UnimplementedElevationServiceServer) GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedElevationServiceServer) testEmbeddedByValue() {}

// UnsafeElevationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElevationServiceServer will
// result in compilation errors.
type UnsafeElevationServiceServer interface {
	mustEmbedUnimplementedElevationServiceServer()
}

func RegisterElevationServiceServer(s grpc.ServiceRegistrar, srv ElevationServiceServer) {
	// If the following call pancis, it indicates UnimplementedElevationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElevationService_ServiceDesc, srv)
}

func _ElevationService_GetElevation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElevationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevationServiceServer).GetElevation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevationService_GetElevation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevationServiceServer).GetElevation(ctx, req.(*ElevationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElevationService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevationServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevationService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevationServiceServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElevationService_ServiceDesc is the grpc.ServiceDesc for ElevationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElevationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elevationapi.v1.ElevationService",
	HandlerType: (*ElevationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetElevation",
			Handler:    _ElevationService_GetElevation_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ElevationService_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elevation.proto",
}
